{"version":3,"sources":["components/Form.js","components/Task.js","components/List.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","_this","this","react_default","a","createElement","className","onSubmit","evt","props","handleSubmit","onChange","handleChange","value","inputValue","Component","Task","style","textDecoration","todo","done","onClick","handleClick","index","List","todos","map","components_Task","key","App","state","setState","target","preventDefault","newTodo","push","components_Form","components_List","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAgBeA,0LAbJ,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QAAME,SAAU,SAACC,GAAD,OAASP,EAAKQ,MAAMC,aAAaF,KAC/CL,EAAAC,EAAAC,cAAA,SACEM,SAAY,SAACH,GAAD,OAASP,EAAKQ,MAAMG,aAAaJ,IAC7CK,MAASX,KAAKO,MAAMK,sBAPbC,cCcJC,mLAbJ,IAAAf,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QAAMY,MAAO,CAAEC,eAAgBhB,KAAKO,MAAMU,KAAKC,KAAO,eAAgB,SACnElB,KAAKO,MAAMU,KAAKN,OAEnBV,EAAAC,EAAAC,cAAA,UAAQgB,QAAS,kBACfpB,EAAKQ,MAAMa,YAAYrB,EAAKQ,MAAMc,SACjCrB,KAAKO,MAAMU,KAAKC,KAAO,OAAS,oBATxBL,aCuBJS,mLAnBJ,IAAAvB,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZJ,KAAKO,MAAMgB,MAAMC,IAAI,SAACP,EAAMI,GAC3B,OACEpB,EAAAC,EAAAC,cAACsB,EAAD,CACAC,IAAKL,EACLA,MAAOA,EACPD,YAAarB,EAAKQ,MAAMa,YACxBH,KAAMA,cAXCJ,aCgDJc,6MA5CbC,MAAQ,CACNhB,WAAY,GACZW,MAAO,MAETb,aAAe,SAACJ,GACdP,EAAK8B,SAAS,CAAEjB,WAAYN,EAAIwB,OAAOnB,WAGzCS,YAAc,SAACC,GACb,IAAME,EAAQxB,EAAK6B,MAAML,MACzBA,EAAMF,GAAOH,MAAQK,EAAMF,GAAOH,KAClCnB,EAAK8B,SAAS,CAACN,aAIjBf,aAAe,SAACF,GACdA,EAAIyB,iBACJ,IAAMC,EAAU,CACdrB,MAAOZ,EAAK6B,MAAMhB,WAClBM,MAAM,GAEFK,EAAQxB,EAAK6B,MAAML,MACzBA,EAAMU,KAAKD,GACXjC,EAAK8B,SAAS,CAAEN,QAAOX,WAAY,8EAInC,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+B,EAAD,CACExB,aAAcV,KAAKU,aACnBE,WAAYZ,KAAK4B,MAAMhB,WACvBJ,aAAcR,KAAKQ,eAGrBP,EAAAC,EAAAC,cAACgC,EAAD,CACEf,YAAapB,KAAKoB,YAClBG,MAAOvB,KAAK4B,MAAML,gBAvCVV,aCIEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3db47844.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Form\">\r\n        <form onSubmit={(evt) => this.props.handleSubmit(evt)}>\r\n          <input\r\n            onChange = {(evt) => this.props.handleChange(evt)}\r\n            value = {this.props.inputValue}  \r\n          />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nclass Task extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Task\">\r\n        <span style={{ textDecoration: this.props.todo.done ? 'line-through': 'none' }}>\r\n          {this.props.todo.value}\r\n        </span>\r\n        <button onClick={() => \r\n          this.props.handleClick(this.props.index)}>\r\n          {this.props.todo.done ? 'Undo' : 'Complete'}</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Task;","import React, { Component } from 'react';\r\n\r\nimport Task from './Task';\r\n\r\nclass List extends Component {\r\n \r\n  render() {\r\n    return (\r\n      <div className=\"List\">\r\n        {this.props.todos.map((todo, index)=>{\r\n          return(\r\n            <Task \r\n            key={index} \r\n            index={index}\r\n            handleClick={this.props.handleClick}\r\n            todo={todo}\r\n            />\r\n          )\r\n        })}\r\n     \r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default List;","import React, { Component } from 'react';\nimport '../App.css';\n\nimport Form from './Form';\nimport List from './List';\n\nclass App extends Component {\n\n  state = {\n    inputValue: '',\n    todos: []\n  }\n  handleChange = (evt) => {\n    this.setState({ inputValue: evt.target.value});\n  }\n\n  handleClick = (index) => {\n    const todos = this.state.todos;\n    todos[index].done = !todos[index].done;\n    this.setState({todos});\n\n  }\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n    const newTodo = {\n      value: this.state.inputValue,\n      done: false\n    };\n    const todos = this.state.todos;\n    todos.push(newTodo);\n    this.setState({ todos, inputValue: ''})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          handleChange={this.handleChange}\n          inputValue={this.state.inputValue}\n          handleSubmit={this.handleSubmit}\n\n        />\n        <List\n          handleClick={this.handleClick}\n          todos={this.state.todos}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}